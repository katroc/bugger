name: Publish to npm

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to publish (e.g., v1.0.1)'
        required: true
        type: string

concurrency:
  group: publish-npm
  cancel-in-progress: false

jobs:
  publish:
    name: Publish package
    # Allow: releases by release-please bot OR manual dispatch with explicit tag
    if: >
      (github.event_name == 'release' && github.event.release.author.login == 'release-please[bot]') ||
      (github.event_name == 'workflow_dispatch' && inputs.tag != '')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # for npm provenance with Node 20+
    steps:
      - name: Checkout target ref
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'release' && github.event.release.tag_name || inputs.tag }}
          fetch-depth: 0

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Install deps
        run: npm ci

      - name: Build
        run: npm run build

      - name: Check if version already published
        id: check_published
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          set -e
          PKG=$(node -p "require('./package.json').name")
          VER_FILE=$(node -p "require('./package.json').version")
          if [ "${GITHUB_EVENT_NAME}" = "release" ] && [ -n "${GITHUB_REF_NAME}" ]; then
            VER="${GITHUB_REF_NAME#v}"
          else
            VER="$VER_FILE"
          fi
          echo "Package: $PKG | Version(file): $VER_FILE | Version(checked): $VER"
          if [ -n "$NPM_TOKEN" ]; then
            npm config set //registry.npmjs.org/:_authToken=$NPM_TOKEN
          fi
          if npm view "$PKG@$VER" version >/dev/null 2>&1; then
            EXISTS=yes
          else
            EXISTS=no
          fi
          echo "already_published=$EXISTS" >> $GITHUB_OUTPUT

      - name: Verify tag matches package version
        if: always()
        run: |
          TAG_INPUT="${{ github.event_name == 'release' && github.event.release.tag_name || inputs.tag }}"
          TAG="${TAG_INPUT#v}"
          PKG_VERSION=$(node -p "require('./package.json').version")
          echo "Tag: $TAG | package.json: $PKG_VERSION"
          if [ "$TAG" != "$PKG_VERSION" ]; then
            echo "::error::Release tag (v$TAG) does not match package.json version ($PKG_VERSION)"
            exit 1
          fi

      - name: Show current and published versions
        run: |
          PKG=$(node -p "require('./package.json').name")
          VER=$(node -p "require('./package.json').version")
          echo "Package: $PKG | Local version: $VER"
          echo "Registry latest: $(npm view "$PKG" version || echo 'n/a')"

      - name: Publish to npm
        if: steps.check_published.outputs.already_published != 'yes'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Use provenance and public access for OSS packages
          npm publish --provenance --access public

      - name: Skip publish (already published)
        if: steps.check_published.outputs.already_published == 'yes'
        run: echo "Version already published; skipping npm publish."
